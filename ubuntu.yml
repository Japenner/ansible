- hosts: localhost
  vars:
    source_key: "./.ssh/id_ed25519"
    dest_key: "{{ lookup('env', 'HOME') }}/.ssh/id_ed25519"
    personal: "{{ lookup('env', 'HOME') }}/repos/personal"
    user: "jacob"
    github_account: "Japenner"
    apt_packages:
      core:
        - build-essential
        - cmake
        - pkg-config
        - libpthread-stubs0-dev
        - lua5.1
        - unzip
        - libtool
        - libtool-bin
        - gettext
        - compton
        - curl
        - htop
        - golang
        - lsof
        - ccache
        - ninja-build
        - python3-pip
        - dconf-editor
        - nvidia-settings
        - moreutils
        - clangd
        - openssl
        - gnupg
        - libpq-dev
      productivity:
        - tmux
        - wireshark
        - fzf
        - xclip
        - tldr
        - ripgrep
        - code
        - shutter
    docker_packages:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    zsh_plugins:
      - name: zsh-autosuggestions
        repo: "https://github.com/zsh-users/zsh-autosuggestions.git"
      - name: zsh-completions
        repo: "https://github.com/zsh-users/zsh-completions.git"
      - name: zsh-syntax-highlighting
        repo: "https://github.com/zsh-users/zsh-syntax-highlighting.git"
    zsh_themes:
      - name: powerlevel10k
        repo: "https://github.com/romkatv/powerlevel10k.git"
    project_repos:
      - name: jp_com
        repo: "git@github.com:{{ github_account }}/jp_com.git"
      - name: obsidian
        repo: "git@github.com:{{ github_account }}/obsidian.git"
      - name: awana_app
        repo: "git@github.com:{{ github_account }}/awana_app.git"
      - name: anki
        repo: "git@github.com:{{ github_account }}/anki.git"
      - name: jacobs_toolbox
        repo: "git@github.com:{{ github_account }}/jacobs_toolbox.git"

  pre_tasks:
    - name: Update Apt
      become: true
      apt:
        update_cache: true
        state: present
      tags: install

  tasks:
    - name: Signal Desktop Application Setup
      include_tasks:
        file: tasks/ubuntu/signal-setup.yml

    - name: FiraCode Mono Nerd Font Setup
      include_tasks:
        file: tasks/ubuntu/fonts-setup.yml

    - name: Discord Desktop Application Setup
      include_tasks:
        file: tasks/ubuntu/discord-setup.yml

    - name: Brave Browser Setup
      include_tasks:
        file: tasks/ubuntu/brave-browser-setup.yml

    - name: SSH Setup
      include_tasks:
        file: tasks/ubuntu/ssh-setup.yml

    - name: Git Setup
      include_tasks:
        file: tasks/ubuntu/git-setup.yml

    - name: Install Core and Productivity Package
      include_tasks:
        file: tasks/ubuntu/core-setup.yml

    # GitHub CLI Setup
    - name: Install GitHub CLI
      become: true
      apt:
        name: gh
        state: present
      tags: cli

    # Obsidian App Setup
    - name: Download and Install Obsidian
      become: true
      get_url:
        url: "https://github.com/obsidianmd/obsidian-releases/releases/download/v1.7.4/obsidian_1.7.4_amd64.deb"
        dest: /tmp/obsidian.deb
        mode: "0644"
      register: obsidian_download
      tags: obsidian

    - name: Install Obsidian .deb package
      become: true
      apt:
        deb: /tmp/obsidian.deb
        state: present
      when: obsidian_download.changed
      tags: obsidian

    # Lazydocker CLI Setup
    - name: Download and Install Lazydocker
      become: true
      get_url:
        url: "https://github.com/jesseduffield/lazydocker/releases/download/v0.23.3/lazydocker_0.23.3_Linux_x86_64.tar.gz"
        dest: /tmp/lazydocker.tar.gz
      register: lazydocker_download
      tags: lazydocker

    - name: Extract and Install Lazydocker
      become: true
      unarchive:
        src: /tmp/lazydocker.tar.gz
        dest: /usr/local/bin/
        remote_src: yes
      args:
        creates: /usr/local/bin/lazydocker
      when: lazydocker_download.changed
      tags: lazydocker

    # Docker Setup
    # - name: Remove conflicting Docker packages
    #   become: true
    #   apt:
    #     name: "{{ item }}"
    #     state: absent
    #   loop:
    #     - docker.io
    #     - docker-doc
    #     - podman-docker
    #     - containerd
    #     - runc
    #   tags: docker

    # - name: Install Docker prerequisites and GPG key
    #   become: true
    #   apt:
    #     name: ["ca-certificates", "curl", "gnupg"]
    #     state: present
    #   tags: docker

    # - name: Setup Docker Repository and Install
    #   block:
    #     - name: Create directory for Docker GPG key
    #       file:
    #         path: /etc/apt/keyrings
    #         state: directory
    #         mode: "0755"

    #     - name: Add Docker GPG key
    #       get_url:
    #         url: https://download.docker.com/linux/ubuntu/gpg
    #         dest: /etc/apt/keyrings/docker.asc
    #         mode: "0644"

    #     - name: Add Docker APT source list
    #       shell: |
    #         echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" > /etc/apt/sources.list.d/docker.list
    #       args:
    #         creates: /etc/apt/sources.list.d/docker.list

    #     - name: Install Docker packages
    #       become: true
    #       apt:
    #         name: "{{ docker_packages }}"
    #         state: present
    #   tags: docker

    # - name: Ensure Docker service is running and user is added
    #   become: true
    #   block:
    #     - service:
    #         name: docker
    #         state: started
    #         enabled: true
    #     - user:
    #         name: "{{ user }}"
    #         groups: docker
    #         append: true
    #   tags: docker

    # ZSH & Oh-My-Zsh Setup
    - name: Install ZSH, change shell, and setup Oh-My-Zsh
      block:
        - name: Install ZSH
          apt:
            name: zsh
            state: present
          become: true

        - name: Change shell to ZSH
          become: true
          command: chsh -s /usr/bin/zsh "{{ user }}"
          tags: zsh

        - name: Install Oh-My-Zsh if missing
          shell: |
            if [ ! -d /home/{{ user }}/.oh-my-zsh ]; then
              sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)";
            fi
          args:
            creates: "/home/{{ user }}/.oh-my-zsh"
      tags: zsh

    - name: Clone ZSH plugins
      ansible.builtin.git:
        repo: "{{ item.repo }}"
        dest: "~/.oh-my-zsh/custom/plugins/{{ item.name }}"
      loop: "{{ zsh_plugins }}"
      tags: zsh

    - name: Clone ZSH themes
      ansible.builtin.git:
        repo: "{{ item.repo }}"
        dest: "~/.oh-my-zsh/custom/themes/{{ item.name }}"
      loop: "{{ zsh_themes }}"
      tags: zsh

    - name: Install Starship Prompt
      shell: curl -fsSL https://starship.rs/install.sh | bash -s -- -y
      args:
        creates: "/usr/local/bin/starship"

    # Spaceship Theme Setup
    # - name: Clone Spaceship Prompt theme
    #   ansible.builtin.git:
    #     repo: "https://github.com/denysdovhan/spaceship-prompt.git"
    #     dest: "~/.oh-my-zsh/custom/themes/spaceship-prompt"
    #     depth: 1
    #   tags: zsh

    # - name: Create symbolic link for Spaceship Prompt theme
    #   file:
    #     src: "~/.oh-my-zsh/custom/themes/spaceship-prompt/spaceship.zsh-theme"
    #     dest: "~/.oh-my-zsh/custom/themes/spaceship.zsh-theme"
    #     state: link
    #   tags: zsh

    # Install ASDF
    - name: Clone ASDF and configure
      ansible.builtin.git:
        repo: "https://github.com/asdf-vm/asdf.git"
        dest: "{{ lookup('env', 'HOME') }}/.asdf"
        depth: 1
      tags: asdf

    - name: Add ASDF to ~/.zshrc
      lineinfile:
        path: "{{ lookup('env', 'HOME') }}/.zshrc"
        line: '. "$HOME/.asdf/asdf.sh"'
        create: yes
      tags: asdf

    # Source ASDF for the Ansible session
    - name: Source ASDF
      shell: . $HOME/.asdf/asdf.sh
      args:
        executable: /bin/bash

    # Install ASDF plugin for Ruby
    - name: Add ASDF plugin for Ruby
      shell: asdf plugin-add ruby https://github.com/asdf-vm/asdf-ruby.git
      args:
        creates: "{{ lookup('env', 'HOME') }}/.asdf/plugins/ruby"
      tags: asdf

      # Add ASDF plugin for Node.js
    - name: Add ASDF plugin for Node.js
      shell: . $HOME/.asdf/asdf.sh && asdf plugin-add nodejs https://github.com/asdf-vm/asdf-nodejs.git
      args:
        creates: "{{ lookup('env', 'HOME') }}/.asdf/plugins/nodejs"
      environment:
        PATH: "{{ lookup('env', 'PATH') }}:{{ lookup('env', 'HOME') }}/.asdf/bin:{{ lookup('env', 'HOME') }}/.asdf/shims"
      tags: asdf

    # Verify Node.js plugin installation
    - name: Verify Node.js plugin and keyring import script existence
      stat:
        path: "{{ lookup('env', 'HOME') }}/.asdf/plugins/nodejs/bin/import-release-team-keyring"
      register: keyring_script
      tags: asdf

    # Import Node.js release team's OpenPGP keys
    - name: Import Node.js release team's OpenPGP keys (required for Node.js plugin)
      shell: . $HOME/.asdf/asdf.sh && bash ~/.asdf/plugins/nodejs/bin/import-release-team-keyring
      args:
        executable: /bin/bash
      environment:
        PATH: "{{ lookup('env', 'PATH') }}:{{ lookup('env', 'HOME') }}/.asdf/bin:{{ lookup('env', 'HOME') }}/.asdf/shims"
      when: keyring_script.stat.exists
      tags: asdf

    # Error message if keyring import script is missing
    - name: Fail if Node.js keyring import script is missing
      fail:
        msg: "The Node.js keyring import script is missing. Verify the plugin installation."
      when: not keyring_script.stat.exists
      tags: asdf

    - name: Install latest Ruby version with ASDF
      shell: asdf install ruby latest
      tags: asdf

    - name: Set global Ruby version
      shell: asdf global ruby latest
      tags: asdf

    - name: Install latest Node.js version with ASDF
      shell: asdf install nodejs latest
      tags: asdf

    - name: Set global Node.js version
      shell: asdf global nodejs latest
      tags: asdf

    # Projects Checkout
    - name: Check if project directories exist
      ansible.builtin.stat:
        path: "{{ personal }}/{{ item.name }}"
      register: repo_dir_check
      loop: "{{ project_repos }}"
      loop_control:
        loop_var: item
        index_var: repo_index
      tags: projects

    - name: Clone or update personal repositories
      block:
        - name: Clone the repository if not present
          ansible.builtin.git:
            repo: "{{ item.repo }}"
            dest: "{{ personal }}/{{ item.name }}"
            clone: yes
            update: no
          when: not repo_dir_check.results[repo_index].stat.exists
          loop: "{{ project_repos }}"
          loop_control:
            loop_var: item
            index_var: repo_index
          tags: projects

    - name: Pull latest changes if the repository exists
      ansible.builtin.git:
        repo: "{{ item.repo }}"
        dest: "{{ personal }}/{{ item.name }}"
        update: yes
      when: repo_dir_check.results[repo_index].stat.exists
      loop: "{{ project_repos }}"
      loop_control:
        loop_var: item
        index_var: repo_index
      tags: projects
