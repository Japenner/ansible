- hosts: localhost
  vars:
    source_key: "./.ssh/id_ed25519"
    dest_key: "{{ lookup('env', 'HOME') }}/.ssh/id_ed25519"
    personal: "{{ lookup('env', 'HOME') }}/repos/personal"
    user: "jacob"
    github_account: "Japenner"
    apt_packages:
      core:
        - build-essential
        - cmake
        - pkg-config
        - libpthread-stubs0-dev
        - lua5.1
        - unzip
        - libtool
        - libtool-bin
        - gettext
        - compton
        - curl
        - htop
        - golang
        - lsof
        - ccache
        - ninja-build
        - python3-pip
        - dconf-editor
        - nvidia-settings
        - moreutils
        - clangd
        - openssl
        - gnupg
        - libpq-dev
      productivity:
        - tmux
        - wireshark
        - fzf
        - xclip
        - tldr
        - ripgrep
        - code
    docker_packages:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    zsh_plugins:
      - name: zsh-autosuggestions
        repo: "https://github.com/zsh-users/zsh-autosuggestions.git"
      - name: zsh-syntax-highlighting
        repo: "https://github.com/zsh-users/zsh-syntax-highlighting.git"
    zsh_themes:
      - name: powerlevel10k
        repo: "https://github.com/romkatv/powerlevel10k.git"
    project_repos:
      - name: jp_com
        repo: "git@github.com:{{ github_account }}/jp_com.git"
      - name: obsidian
        repo: "git@github.com:{{ github_account }}/obsidian.git"
      - name: awana_app
        repo: "git@github.com:{{ github_account }}/awana_app.git"
      - name: anki
        repo: "git@github.com:{{ github_account }}/anki.git"

  pre_tasks:
    - name: Update Apt
      become: true
      apt:
        update_cache: true
        state: present
      tags: install

  tasks:
    # Install Signal
    - name: Add Signal GPG key
      become: true
      apt_key:
        url: "https://updates.signal.org/desktop/apt/keys.asc"
        state: present
      tags: signal

    - name: Add Signal repository to apt sources
      become: true
      apt_repository:
        repo: "deb [arch=amd64] https://updates.signal.org/desktop/apt xenial main"
        state: present
        update_cache: true
      tags: signal

    - name: Install Signal
      become: true
      apt:
        name: signal-desktop
        state: present
      tags: signal

    # Install Fira Code Mono Nerd Font
    - name: Ensure fonts directory exists
      file:
        path: "{{ lookup('env', 'HOME') }}/.local/share/fonts"
        state: directory
        mode: "0755"
      tags: font

    - name: Download Fira Code Mono Nerd Font
      get_url:
        url: "https://github.com/ryanoasis/nerd-fonts/releases/download/v2.3.3/FiraCode.zip"
        dest: "/tmp/FiraCode.zip"
        mode: "0644"
      tags: font

    - name: Unzip Fira Code Nerd Font
      unarchive:
        src: "/tmp/FiraCode.zip"
        dest: "{{ lookup('env', 'HOME') }}/.local/share/fonts"
        remote_src: yes
      tags: font

    - name: Refresh font cache
      command: fc-cache -fv
      tags: font

    - name: Remove downloaded font zip file
      file:
        path: "/tmp/FiraCode.zip"
        state: absent
      tags: font

    # Install Discord
    - name: Download and Install Discord
      become: true
      get_url:
        url: "https://discordapp.com/api/download?platform=linux&format=deb"
        dest: /tmp/discord.deb
        mode: "0644"
      register: discord_download
      tags: discord

    - name: Install Discord .deb package
      become: true
      apt:
        deb: /tmp/discord.deb
        state: present
      when: discord_download.changed
      tags: discord

    # Install Brave Browser
    - name: Check if Brave Browser is installed
      shell: "dpkg -l | grep brave-browser"
      register: brave_check
      ignore_errors: true
      changed_when: false
      tags: brave

    - name: Add Brave Browser GPG key securely
      become: true
      get_url:
        url: "https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg"
        dest: /usr/share/keyrings/brave-browser-archive-keyring.gpg
        mode: "0644"
      when: brave_check.rc != 0
      tags: brave

    - name: Add Brave Browser repository to apt sources
      become: true
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg] https://brave-browser-apt-release.s3.brave.com/ stable main"
        state: present
        update_cache: true
      when: brave_check.rc != 0
      tags: brave

    - name: Install Brave Browser
      become: true
      apt:
        name: brave-browser
        state: present
      when: brave_check.rc != 0
      tags: brave

    # SSH Setup
    - name: Ensure .ssh directory exists
      file:
        dest: "{{ dest_key | dirname }}"
        mode: 0700
        state: directory
      tags: ssh

    - name: Copy SSH keys
      copy:
        src: "{{ item }}"
        dest: "{{ dest_key if 'pub' not in item else dest_key + '.pub' }}"
        mode: "{{ '0600' if 'pub' not in item else '0644' }}"
      loop:
        - "{{ source_key }}"
        - "{{ source_key }}.pub"
      tags: ssh

    - name: Set authorized key from file
      authorized_key:
        user: "{{ user }}"
        state: present
        key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_ed25519.pub') }}"
      tags: ssh

    - name: Add GitHub to known hosts
      shell: "ssh-keyscan -H github.com >> {{ lookup('env', 'HOME') }}/.ssh/known_hosts"
      args:
        creates: "{{ lookup('env', 'HOME') }}/.ssh/known_hosts"
      tags: ssh

    # Git Setup
    - name: Configure global git settings
      git_config:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        scope: global
      loop:
        - { name: "user.email", value: "japenner@gmail.com" }
        - { name: "user.name", value: "Jacob Penner" }
        - { name: "push.default", value: "current" }
      tags:
        - git

    # Install System Packages
    - name: Install core and productivity packages
      become: true
      apt:
        name: "{{ apt_packages.core + apt_packages.productivity }}"
        state: present
        update_cache: true
      tags:
        - core
        - productivity

    # GitHub CLI Setup
    - name: Install GitHub CLI
      become: true
      apt:
        name: gh
        state: present
      tags: cli

    # Obsidian App Setup
    - name: Download and Install Obsidian
      become: true
      get_url:
        url: "https://github.com/obsidianmd/obsidian-releases/releases/download/v1.7.4/obsidian_1.7.4_amd64.deb"
        dest: /tmp/obsidian.deb
        mode: "0644"
      register: obsidian_download
      tags: obsidian

    - name: Install Obsidian .deb package
      become: true
      apt:
        deb: /tmp/obsidian.deb
        state: present
      when: obsidian_download.changed
      tags: obsidian

    # Lazydocker CLI Setup
    - name: Download and Install Lazydocker
      become: true
      get_url:
        url: "https://github.com/jesseduffield/lazydocker/releases/download/v0.23.3/lazydocker_0.23.3_Linux_x86_64.tar.gz"
        dest: /tmp/lazydocker.tar.gz
      register: lazydocker_download
      tags: lazydocker

    - name: Extract and Install Lazydocker
      become: true
      unarchive:
        src: /tmp/lazydocker.tar.gz
        dest: /usr/local/bin/
        remote_src: yes
      args:
        creates: /usr/local/bin/lazydocker
      when: lazydocker_download.changed
      tags: lazydocker

    # Docker Setup
    - name: Remove conflicting Docker packages
      become: true
      apt:
        name: "{{ item }}"
        state: absent
      loop:
        - docker.io
        - docker-doc
        - podman-docker
        - containerd
        - runc
      tags: docker

    - name: Install Docker prerequisites and GPG key
      become: true
      apt:
        name: ["ca-certificates", "curl", "gnupg"]
        state: present
      tags: docker

    - name: Setup Docker Repository and Install
      block:
        - name: Create directory for Docker GPG key
          file:
            path: /etc/apt/keyrings
            state: directory
            mode: "0755"

        - name: Add Docker GPG key
          get_url:
            url: https://download.docker.com/linux/ubuntu/gpg
            dest: /etc/apt/keyrings/docker.asc
            mode: "0644"

        - name: Add Docker APT source list
          shell: |
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" > /etc/apt/sources.list.d/docker.list
          args:
            creates: /etc/apt/sources.list.d/docker.list

        - name: Install Docker packages
          become: true
          apt:
            name: "{{ docker_packages }}"
            state: present
      tags: docker

    - name: Ensure Docker service is running and user is added
      become: true
      block:
        - service:
            name: docker
            state: started
            enabled: true
        - user:
            name: "{{ user }}"
            groups: docker
            append: true
      tags: docker

    # ZSH & Oh-My-Zsh Setup
    - name: Install ZSH, change shell, and setup Oh-My-Zsh
      block:
        - name: Install ZSH
          apt:
            name: zsh
            state: present
          become: true

        - name: Change shell to ZSH
          become: true
          command: chsh -s /usr/bin/zsh "{{ user }}"
          tags: zsh

        - name: Install Oh-My-Zsh if missing
          shell: |
            if [ ! -d /home/{{ user }}/.oh-my-zsh ]; then
              sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)";
            fi
          args:
            creates: "/home/{{ user }}/.oh-my-zsh"
      tags: zsh

    - name: Clone ZSH plugins
      ansible.builtin.git:
        repo: "{{ item.repo }}"
        dest: "~/.oh-my-zsh/custom/plugins/{{ item.name }}"
      loop: "{{ zsh_plugins }}"
      tags: zsh

    - name: Clone ZSH themes
      ansible.builtin.git:
        repo: "{{ item.repo }}"
        dest: "~/.oh-my-zsh/custom/themes/{{ item.name }}"
      loop: "{{ zsh_themes }}"
      tags: zsh

    - name: Install Starship Prompt
      shell: curl -fsSL https://starship.rs/install.sh | bash -s -- -y
      args:
        creates: "/usr/local/bin/starship"

    # Spaceship Theme Setup
    - name: Clone Spaceship Prompt theme
      ansible.builtin.git:
        repo: "https://github.com/denysdovhan/spaceship-prompt.git"
        dest: "~/.oh-my-zsh/custom/themes/spaceship-prompt"
        depth: 1
      tags: zsh

    - name: Create symbolic link for Spaceship Prompt theme
      file:
        src: "~/.oh-my-zsh/custom/themes/spaceship-prompt/spaceship.zsh-theme"
        dest: "~/.oh-my-zsh/custom/themes/spaceship.zsh-theme"
        state: link
      tags: zsh

    # Install ASDF
    - name: Clone ASDF and configure
      ansible.builtin.git:
        repo: "https://github.com/asdf-vm/asdf.git"
        dest: "{{ lookup('env', 'HOME') }}/.asdf"
        depth: 1
      tags: asdf

    - name: Add ASDF to ~/.zshrc
      lineinfile:
        path: "{{ lookup('env', 'HOME') }}/.zshrc"
        line: '. "$HOME/.asdf/asdf.sh"'
        create: yes
      tags: asdf

    # Projects Checkout
    - name: Check if project directories exist
      ansible.builtin.stat:
        path: "{{ personal }}/{{ item.name }}"
      register: repo_dir_check
      loop: "{{ project_repos }}"
      loop_control:
        loop_var: item
        index_var: repo_index
      tags: projects

    - name: Clone or update personal repositories
      block:
        - name: Clone the repository if not present
          ansible.builtin.git:
            repo: "{{ item.repo }}"
            dest: "{{ personal }}/{{ item.name }}"
            clone: yes
            update: no
          when: not repo_dir_check.results[repo_index].stat.exists
          loop: "{{ project_repos }}"
          loop_control:
            loop_var: item
            index_var: repo_index
          tags: projects

    - name: Pull latest changes if the repository exists
      ansible.builtin.git:
        repo: "{{ item.repo }}"
        dest: "{{ personal }}/{{ item.name }}"
        update: yes
      when: repo_dir_check.results[repo_index].stat.exists
      loop: "{{ project_repos }}"
      loop_control:
        loop_var: item
        index_var: repo_index
      tags: projects
